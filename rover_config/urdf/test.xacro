<?xml version="1.0"?>
<robot name="test" 
   xmlns:xacro="http://www.ros.org/wiki/xacro">

   <xacro:include filename="$(find rover_config)/urdf/wheel.urdf.xacro" />


   <!-- Defining the colors used in this robot -->

   <material name="Black">
      <color rgba="0.0 0.0 0.0 1.0"/>
   </material>

   <material name="Red">
      <color rgba="0.8 0.0 0.0 1.0"/>
   </material>

   <material name="White">
      <color rgba="1.0 1.0 1.0 1.0"/>
   </material>

   <material name="Blue">
      <color rgba="0.0 0.0 0.8 1.0"/>
   </material>


   <!-- Property list -->
   <!-- All units in m-kg-s-radians unit system -->

   <xacro:property name="M_PI" value="3.1415926535897931" />
   <xacro:property name="M_PI_2" value="1.570796327" />
   <xacro:property name="DEG_TO_RAD" value="0.017453293" />


   <!-- Main body length height width -->

   <xacro:property name="base_height" value="0.2" />
   <!-- in meter -->
   <xacro:property name="base_width" value="0.2" />
   <!-- in meter -->
   <xacro:property name="base_lenght" value="0.5" />
   <!-- in meter -->
   <xacro:property name="base_mass" value="20.0" />
   <!-- in kg -->

   <xacro:property name="rocker_height" value="0.1" />
   <!-- in meter -->
   <xacro:property name="rocker_width" value="0.1" />
   <!-- in meter -->
   <xacro:property name="rocker_lenght" value="0.7" />
   <!-- in meter -->
   <xacro:property name="rocker_mass" value="2.0" />
   <!-- in kg -->


   <!-- Macro for calculating inertia of cylinder -->

   <xacro:macro name="cylinder_inertia" params="m r h">
      <inertia ixx="${ m * ( 3 * r*r + h*h ) / 12}" ixy="0" ixz="0" iyy="${ m * ( 3 * r*r + h*h ) / 12}" iyz="0" izz="${ m * r / 2}" />
   </xacro:macro>


   <!-- Macro for calculating inertia of a box -->

   <xacro:macro name="box_inertia" params="m x y z">
      <inertia ixx="${0.0833333 * m * (y*y + z*z)}" ixy="0.0" ixz="0.0" iyy="${0.0833333 * m * (x*x + z*z)}" iyz="0.0" izz="${0.0833333 * m * (x*x + y*y)}" />
   </xacro:macro>


   <!-- World link -->
   <!-- base_footprint is a fictious link(frame) that is on the ground right below base_link origin -->
   <!-- It is necessary as gazebo does not support inertia for the root link -->
   <!-- Do not call it world as it is reserved for robot that must be fixed to the world -->

   <link name="base_link">
   </link>


   <gazebo reference="base_link">
      <turnGravityOff>false</turnGravityOff>
   </gazebo>


   <joint name="glue_robot_to_world" type="fixed">
      <origin xyz="0 0 0.1" rpy="0 0 0" />
      <parent link="base_link" />
      <child link="chassis" />
   </joint>


   <!-- Base link -->
   <!-- Actual body/chassis of the robot -->

   <link name="chassis">
      <inertial>
         <mass value="${base_mass}" />
         <!-- the3x3 rotational inertia matrix -->
         <box_inertia m="${base_mass}" x="${base_lenght}" y="${base_width}" z="${base_height}" />
         <origin xyz="0 0 0" />
      </inertial>
      <visual>
         <origin xyz="0 0 0" rpy="0 0 0" />
         <geometry>
            <box size="${base_lenght} ${base_width} ${base_height}" />
         </geometry>
         <material name="Blue" />
      </visual>
      <collision>
         <origin xyz="0 0 0" rpy="0 0 0" />
         <geometry>
            <box size="${base_lenght} ${base_width} ${base_height}" />
         </geometry>
      </collision>
   </link>


   <gazebo reference="chassis">
      <material>Gazebo/White</material>
      <turnGravityOff>false</turnGravityOff>
   </gazebo>

   <xacro:macro name="rocker" params="side parent translateX translateY translateZ flipY">
      <link name="${side}_rocker">
         <visual>
            <origin xyz="0 ${flipY * rocker_width / 2} 0" rpy="0 0 0"/>
            <geometry>
               <box size="${rocker_lenght} ${rocker_width} ${rocker_height}" />
            </geometry>
            <material name="Red" />
         </visual>
         <collision>
            <origin xyz="0 ${flipY * rocker_width / 2} 0" rpy="0 0 0"/>
            <geometry>
               <box size="${rocker_lenght} ${rocker_width} ${rocker_height}" />
            </geometry>
         </collision>
         <inertial>
            <mass value="${rocker_mass}" />
            <origin xyz="0 0 0" />
            <box_inertia m="${rocker_mass}" x="${rocker_lenght}" y="${rocker_width}" z="${rocker_height}" />
         </inertial>
      </link>

      <joint name="${side}_rocker_joint" type="revolute">
         <origin xyz="${translateX} ${translateY} ${translateZ}" rpy="0.0 0.0 0.0"/>
         <parent link="${parent}"/>
         <child link="${side}_rocker"/>
         <axis xyz="0 1 0"/>
         <limit lower="${-30 * DEG_TO_RAD}" upper="${30 * DEG_TO_RAD}" effort="10000.0" velocity="100000.0"/>
         <mimic joint="right_rocker_joint" />
      </joint>

      <!-- <transmission name="${side}_rocker_joint_trans" >
         <type>transmission_interface/SimpleTransmission</type>
         <joint name="${side}_rocker_joint">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
         </joint>
         <actuator name="${side}_rocker_joint_motor">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
         </actuator>
      </transmission> -->

      <wheel fb="front" lr="${side}" parent="${side}_rocker" translateX="${rocker_lenght / 2}" translateY="${flipY * rocker_width}" translateZ="${-rocker_height / 2}" flipY="${flipY}" flipZ="1"/>
      <wheel fb="back" lr="${side}" parent="${side}_rocker" translateX="${-rocker_lenght / 2}" translateY="${flipY * rocker_width}" translateZ="${-rocker_height / 2}" flipY="${flipY}" flipZ="-1"/>
   </xacro:macro>

   <rocker side="left" parent="chassis" translateX="0" translateY="${base_width / 2}" translateZ="${-base_height / 2}" flipY="1" />
   <rocker side="right" parent="chassis" translateX="0" translateY="${-base_width / 2}" translateZ="${-base_height / 2}" flipY="-1" />


   <!-- Wheel Definition for simulation -->
   <!-- <wheel fb="front" lr="right" parent="chassis" translateX="0.4" translateY="${-1*(base_width/2+0.04)}" translateZ="-0.065" flipY="1"/>
   <wheel fb="front" lr="left" parent="chassis" translateX="0.4" translateY="${1*(base_width/2+0.04)}" translateZ="-0.065" flipY="1"/>
   <wheel fb="back" lr="right" parent="chassis" translateX="-0.4" translateY="${-1*(base_width/2+0.04)}" translateZ="-0.065" flipY="1"/>
   <wheel fb="back" lr="left" parent="chassis" translateX="-0.4" translateY="${1*(base_width/2+0.04)}" translateZ="-0.065" flipY="1"/> -->

   <!-- Skid Steering Drive for 4 wheel robot for simulation -->
   <gazebo>
      <plugin name="drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
         <updateRate>100</updateRate>
         <robotNameSpace>/</robotNameSpace>
         <leftFrontJoint>front_left_wheel_joint</leftFrontJoint>
         <rightFrontJoint>front_right_wheel_joint</rightFrontJoint>
         <leftRearJoint>back_left_wheel_joint</leftRearJoint>
         <rightRearJoint>back_right_wheel_joint</rightRearJoint>
         <wheelSeparation>${rocker_lenght}</wheelSeparation>
         <wheelDiameter>0.32</wheelDiameter>
         <robotBaseFrame>base_link</robotBaseFrame>
         <torque>100</torque>
         <topicName>cmd_vel</topicName>
         <broadcastTF>true</broadcastTF>
         <commandTopic>cmd_vel</commandTopic>
         <odometryTopic>odom</odometryTopic>
         <odometryFrame>odom</odometryFrame>
         <covariance_x>0.00100</covariance_x>
         <covariance_y>0.00100</covariance_y>
         <covariance_yaw>0.010000</covariance_yaw>
      </plugin>
   </gazebo>

   <!-- Publishing joint states from Gazebo simulator -->
   <!-- fixed links are not published -->
   <!-- this is required to publish wheel status -->
   <gazebo>
      <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
         <jointName>
            front_left_wheel_joint, 
            front_right_wheel_joint, 
            back_left_wheel_joint, 
            back_right_wheel_joint,
            left_rocker_joint,
            right_rocker_joint
         </jointName>
         <robotNameSpace>/</robotNameSpace>
         <updateRate>100</updateRate>
         <alwaysOn>true</alwaysOn>
      </plugin>
   </gazebo>

   <!-- <gazebo>
      <plugin name="mimic_rocker" filename="libroboticsgroup_gazebo_mimic_joint_plugin.so">
         <joint>left_rocker_joint</joint>
         <mimicJoint>right_rocker</mimicJoint>
         <multiplier>-1</multiplier>
         <maxEffort>1000</maxEffort>
         <hasPID/>
      </plugin>
   </gazebo> -->

</robot>
